if(start == stop){
return (stop)
}else{
return (seq(start,stop,step))
}
}
EuclideanDistance<-function(a,b){
dist1 = sum( (a-b)^2 )
dist1 = sqrt(dist1)
return(dist1)
}
#print('test EuclideanDistance,', EuclideanDistance(np.array([0,0]),np.array([1,2])))
cat('\n r=',r)
#VERBOSE = TRUE for debugging
VERBOSE = TRUE
#RANDOMIZE = TRUE for randomizing the exemplars to reduce the effects of data ordering that the Leader algorithm is subject to.
RANDOMIZE = FALSE
for(i in myRange(1,n,1) ){
if(VERBOSE==TRUE){
cat('\n Handling point ',i,' out of ',n)
}
newExemplar = TRUE
row = X[i,]#This should be i-th row, just i-1 since python starts counting from 0-th row.
exemplar_ord = myRange(1,m,1)
if(RANDOMIZE==TRUE){
exemplar_ord = sample(exemplar_ord, length(exemplar_ord), replace = FALSE, prob = NULL)
}
for(j in exemplar_ord){
d = EuclideanDistance(row, exemplars[[j]])
if(VERBOSE==TRUE){
cat('\n The',i,'-th point to the ',j,'-th exemplar has L^2 distance', d)
}
if(d<r){
members[[j]] = c(members[[j]],i)
newExemplar = FALSE
break
}
}
if(newExemplar==TRUE){
if(VERBOSE==TRUE){
cat('\n New exemplar created. Current # of exemplars:',m)
#cat(exemplars)
#cat(members)
}
m = m + 1
exemplars[[m]] = row
members[[m]] = c(i)
}
}
print(exemplars)
print(members)
members[[t]] = c(0)
#Row algorithm
X = read.table('test_data1.txt')
m = 1 #pointer for exemplar
row = X[1,]
exemplars = list()
exemplars[[1]] = row
members = list()
for(t in 1:n){
members[[t]] = c(0)
}
#print(exemplars)
#print(members)
myRange<-function(start,stop,step){
if(start == stop){
return (stop)
}else{
return (seq(start,stop,step))
}
}
EuclideanDistance<-function(a,b){
dist1 = sum( (a-b)^2 )
dist1 = sqrt(dist1)
return(dist1)
}
#print('test EuclideanDistance,', EuclideanDistance(np.array([0,0]),np.array([1,2])))
cat('\n r=',r)
#VERBOSE = TRUE for debugging
VERBOSE = TRUE
#RANDOMIZE = TRUE for randomizing the exemplars to reduce the effects of data ordering that the Leader algorithm is subject to.
RANDOMIZE = FALSE
for(i in myRange(1,n,1) ){
if(VERBOSE==TRUE){
cat('\n Handling point ',i,' out of ',n)
}
newExemplar = TRUE
row = X[i,]#This should be i-th row, just i-1 since python starts counting from 0-th row.
exemplar_ord = myRange(1,m,1)
if(RANDOMIZE==TRUE){
exemplar_ord = sample(exemplar_ord, length(exemplar_ord), replace = FALSE, prob = NULL)
}
for(j in exemplar_ord){
d = EuclideanDistance(row, exemplars[[j]])
if(VERBOSE==TRUE){
cat('\n The',i,'-th point to the ',j,'-th exemplar has L^2 distance', d)
}
if(d<r){
members[[j]] = c(members[[j]],i)
newExemplar = FALSE
break
}
}
if(newExemplar==TRUE){
if(VERBOSE==TRUE){
cat('\n New exemplar created. Current # of exemplars:',m)
#cat(exemplars)
#cat(members)
}
m = m + 1
exemplars[[m]] = row
members[[m]] = c(i)
}
}
print(exemplars)
print(members)
#Row algorithm
X = read.table('test_data1.txt')
m = 1 #pointer for exemplar
row = X[1,]
exemplars = list()
exemplars[[1]] = row
members = list()
for(t in 1:n){
members[[t]] = c(0)
}
#print(exemplars)
#print(members)
myRange<-function(start,stop,step){
if(start == stop){
return (stop)
}else{
return (seq(start,stop,step))
}
}
EuclideanDistance<-function(a,b){
dist1 = sum( (a-b)^2 )
dist1 = sqrt(dist1)
return(dist1)
}
#print('test EuclideanDistance,', EuclideanDistance(np.array([0,0]),np.array([1,2])))
cat('\n r=',r)
#VERBOSE = TRUE for debugging
VERBOSE = TRUE
#RANDOMIZE = TRUE for randomizing the exemplars to reduce the effects of data ordering that the Leader algorithm is subject to.
RANDOMIZE = FALSE
for(i in myRange(1,n,1) ){
if(VERBOSE==TRUE){
cat('\n Handling point ',i,' out of ',n)
}
newExemplar = TRUE
row = X[i,]#This should be i-th row, just i-1 since python starts counting from 0-th row.
exemplar_ord = myRange(1,m,1)
if(RANDOMIZE==TRUE){
exemplar_ord = sample(exemplar_ord, length(exemplar_ord), replace = FALSE, prob = NULL)
}
for(j in exemplar_ord){
d = EuclideanDistance(row, exemplars[[j]])
if(VERBOSE==TRUE){
cat('\n The',i,'-th point to the ',j,'-th exemplar has L^2 distance', d)
}
if(d<r){
print(members[[j]] )
members[[j]] = c(members[[j]],i)
newExemplar = FALSE
break
}
}
if(newExemplar==TRUE){
if(VERBOSE==TRUE){
cat('\n New exemplar created. Current # of exemplars:',m)
#cat(exemplars)
#cat(members)
}
m = m + 1
exemplars[[m]] = row
members[[m]] = c(i)
}
}
print(exemplars)
print(members)
#Row algorithm
X = read.table('test_data1.txt')
m = 1 #pointer for exemplar
row = X[1,]
exemplars = list()
exemplars[[1]] = row
members = list()
for(t in 1:n){
members[[t]] = c(NaN)
}
#print(exemplars)
#print(members)
myRange<-function(start,stop,step){
if(start == stop){
return (stop)
}else{
return (seq(start,stop,step))
}
}
EuclideanDistance<-function(a,b){
dist1 = sum( (a-b)^2 )
dist1 = sqrt(dist1)
return(dist1)
}
#print('test EuclideanDistance,', EuclideanDistance(np.array([0,0]),np.array([1,2])))
cat('\n r=',r)
#VERBOSE = TRUE for debugging
VERBOSE = TRUE
#RANDOMIZE = TRUE for randomizing the exemplars to reduce the effects of data ordering that the Leader algorithm is subject to.
RANDOMIZE = FALSE
for(i in myRange(1,n,1) ){
if(VERBOSE==TRUE){
cat('\n Handling point ',i,' out of ',n)
}
newExemplar = TRUE
row = X[i,]#This should be i-th row, just i-1 since python starts counting from 0-th row.
exemplar_ord = myRange(1,m,1)
if(RANDOMIZE==TRUE){
exemplar_ord = sample(exemplar_ord, length(exemplar_ord), replace = FALSE, prob = NULL)
}
for(j in exemplar_ord){
d = EuclideanDistance(row, exemplars[[j]])
if(VERBOSE==TRUE){
cat('\n The',i,'-th point to the ',j,'-th exemplar has L^2 distance', d)
}
if(d<r){
print(members[[j]] )
members[[j]] = c(members[[j]],i)
newExemplar = FALSE
break
}
}
if(newExemplar==TRUE){
if(VERBOSE==TRUE){
cat('\n New exemplar created. Current # of exemplars:',m)
#cat(exemplars)
#cat(members)
}
m = m + 1
exemplars[[m]] = row
members[[m]] = c(i)
}
}
print(exemplars)
print(members)
cat('>>>',exemplar_ord)
#Row algorithm
X = read.table('test_data1.txt')
m = 1 #pointer for exemplar
row = X[1,]
exemplars = list()
exemplars[[1]] = row
members = list()
for(t in 1:n){
members[[t]] = c(NaN)
}
#print(exemplars)
#print(members)
myRange<-function(start,stop,step){
if(start == stop){
return (stop)
}else{
return (seq(start,stop,step))
}
}
EuclideanDistance<-function(a,b){
dist1 = sum( (a-b)^2 )
dist1 = sqrt(dist1)
return(dist1)
}
#print('test EuclideanDistance,', EuclideanDistance(np.array([0,0]),np.array([1,2])))
cat('\n r=',r)
#VERBOSE = TRUE for debugging
VERBOSE = TRUE
#RANDOMIZE = TRUE for randomizing the exemplars to reduce the effects of data ordering that the Leader algorithm is subject to.
RANDOMIZE = FALSE
for(i in myRange(1,n,1) ){
if(VERBOSE==TRUE){
cat('\n Handling point ',i,' out of ',n)
}
newExemplar = TRUE
row = X[i,]#This should be i-th row, just i-1 since python starts counting from 0-th row.
exemplar_ord = myRange(1,m,1)
if(RANDOMIZE==TRUE){
exemplar_ord = sample(exemplar_ord, length(exemplar_ord), replace = FALSE, prob = NULL)
}
cat('>>>',exemplar_ord)
for(j in exemplar_ord){
d = EuclideanDistance(row, exemplars[[j]])
if(VERBOSE==TRUE){
cat('\n The',i,'-th point to the ',j,'-th exemplar has L^2 distance', d)
}
if(d<r){
print(members[[j]] )
members[[j]] = c(members[[j]],i)
newExemplar = FALSE
break
}
}
if(newExemplar==TRUE){
if(VERBOSE==TRUE){
cat('\n New exemplar created. Current # of exemplars:',m)
#cat(exemplars)
#cat(members)
}
m = m + 1
exemplars[[m]] = row
members[[m]] = c(i)
}
}
print(exemplars)
print(members)
#Row algorithm
X = read.table('test_data1.txt')
m = 1 #pointer for exemplar
row = X[1,]
exemplars = list()
exemplars[[1]] = row
members = list()
for(t in 1:n){
members[[t]] = c(NaN)
}
#print(exemplars)
#print(members)
myRange<-function(start,stop,step){
if(start == stop){
return (stop)
}else{
return (seq(start,stop-1,step))
}
}
EuclideanDistance<-function(a,b){
dist1 = sum( (a-b)^2 )
dist1 = sqrt(dist1)
return(dist1)
}
#print('test EuclideanDistance,', EuclideanDistance(np.array([0,0]),np.array([1,2])))
cat('\n r=',r)
#VERBOSE = TRUE for debugging
VERBOSE = TRUE
#RANDOMIZE = TRUE for randomizing the exemplars to reduce the effects of data ordering that the Leader algorithm is subject to.
RANDOMIZE = FALSE
for(i in myRange(1,n,1) ){
if(VERBOSE==TRUE){
cat('\n Handling point ',i,' out of ',n)
}
newExemplar = TRUE
row = X[i,]#This should be i-th row, just i-1 since python starts counting from 0-th row.
exemplar_ord = myRange(1,m+1,1)
if(RANDOMIZE==TRUE){
exemplar_ord = sample(exemplar_ord, length(exemplar_ord), replace = FALSE, prob = NULL)
}
cat('>>>',exemplar_ord)
for(j in exemplar_ord){
d = EuclideanDistance(row, exemplars[[j]])
if(VERBOSE==TRUE){
cat('\n The',i,'-th point to the ',j,'-th exemplar has L^2 distance', d)
}
if(d<r){
print(members[[j]] )
members[[j]] = c(members[[j]],i)
newExemplar = FALSE
break
}
}
if(newExemplar==TRUE){
m = m + 1
if(VERBOSE==TRUE){
cat('\n New exemplar created. Current # of exemplars:',m)
#cat(exemplars)
#cat(members)
}
exemplars[[m]] = row
members[[m]] = c(i)
}
}
print(exemplars)
print(members)
#Row algorithm
X = read.table('test_data1.txt')
m = 1 #pointer for exemplar
row = X[1,]
exemplars = list()
exemplars[[1]] = row
members = list()
for(t in 1:n){
members[[t]] = c(NaN)
}
#print(exemplars)
#print(members)
myRange<-function(start,stop,step){
if(start == stop){
return (stop)
}else{
return (seq(start,stop-1,step))
}
}
EuclideanDistance<-function(a,b){
dist1 = sum( (a-b)^2 )
dist1 = sqrt(dist1)
return(dist1)
}
#print('test EuclideanDistance,', EuclideanDistance(np.array([0,0]),np.array([1,2])))
cat('\n r=',r)
#VERBOSE = TRUE for debugging
VERBOSE = TRUE
#RANDOMIZE = TRUE for randomizing the exemplars to reduce the effects of data ordering that the Leader algorithm is subject to.
RANDOMIZE = FALSE
for(i in myRange(1,n+1,1) ){
if(VERBOSE==TRUE){
cat('\n Handling point ',i,' out of ',n)
}
newExemplar = TRUE
row = X[i,]#This should be i-th row, just i-1 since python starts counting from 0-th row.
exemplar_ord = myRange(1,m+1,1)
if(RANDOMIZE==TRUE){
exemplar_ord = sample(exemplar_ord, length(exemplar_ord), replace = FALSE, prob = NULL)
}
cat('>>>',exemplar_ord)
for(j in exemplar_ord){
d = EuclideanDistance(row, exemplars[[j]])
if(VERBOSE==TRUE){
cat('\n The',i,'-th point to the ',j,'-th exemplar has L^2 distance', d)
}
if(d<r){
print(members[[j]] )
members[[j]] = c(members[[j]],i)
newExemplar = FALSE
break
}
}
if(newExemplar==TRUE){
m = m + 1
if(VERBOSE==TRUE){
cat('\n New exemplar created. Current # of exemplars:',m)
#cat(exemplars)
#cat(members)
}
exemplars[[m]] = row
members[[m]] = c(i)
}
}
print(exemplars)
print(members)
is.nan(exemplars[[k]])
k=1
is.nan(exemplars[[k]])
exemplar[[1]]
exemplars[[1]]
is.nan(exemplars[[1]])
is.nan(as.vactor(exemplars[[1]]) )
is.nan(as.vector(exemplars[[1]]) )
type(exemplars[[1]])
typeof(exemplars[[1]])
as.numeric(exemplars[[1]])
is.nan( as.numeric(exemplars[[1]]) )
sum( is.nan(as.numeric(exemplars[[k]]) ) )
#Reduced dataset
X_reduced = matrix(NA,nrow=0,ncol=dim(X)[2])
for(k in 1:n){
if( sum( is.nan(as.numeric(exemplars[[k]]) ) )>0){
continue
}
#print(exemplars[k])
X_reduced = rbind(X_reduced, as.numeric(exemplars[[k]]) )
}
length(exemplars)
#Reduced dataset
X_reduced = matrix(NA,nrow=0,ncol=dim(X)[2])
for(k in 1:length(exemplars)){
if( sum( is.nan(as.numeric(exemplars[[k]]) ) )>0){
continue
}
#print(exemplars[k])
X_reduced = rbind(X_reduced, as.numeric(exemplars[[k]]) )
}
#plot first two dimensions of original and reduced datasets.
X_original = as.matrix(X)
plot(X_original[,1], X_original[,2],main='Original dataset')
X_reduced = as.matrix(X_reduced)
plotr(X_reduced[,0], X_reduced[,1],col='red',main=paste0('Row Algorithm processed dataset, r=',r))
#Reduced dataset
X_reduced = matrix(NA,nrow=0,ncol=dim(X)[2])
for(k in 1:length(exemplars)){
if( sum( is.nan(as.numeric(exemplars[[k]]) ) )>0){
continue
}
#print(exemplars[k])
X_reduced = rbind(X_reduced, as.numeric(exemplars[[k]]) )
}
#plot first two dimensions of original and reduced datasets.
X_original = as.matrix(X)
plot(X_original[,1], X_original[,2],main='Original dataset')
X_reduced = as.matrix(X_reduced)
plot(X_reduced[,0], X_reduced[,1],col='red',main=paste0('Row Algorithm processed dataset, r=',r))
X_reduced
#Reduced dataset
X_reduced = matrix(NA,nrow=0,ncol=dim(X)[2])
for(k in 1:length(exemplars)){
if( sum( is.nan(as.numeric(exemplars[[k]]) ) )>0){
continue
}
#print(exemplars[k])
X_reduced = rbind(X_reduced, as.numeric(exemplars[[k]]) )
}
#plot first two dimensions of original and reduced datasets.
X_original = as.matrix(X)
plot(X_original[,1], X_original[,2],main='Original dataset')
X_reduced = as.matrix(X_reduced)
plot(X_reduced[,1], X_reduced[,2],col='red',main=paste0('Row Algorithm processed dataset, r=',r))
?shuffle
